// ************************************************************************
// Copyright (c) 2007   Lawrence Livermore National Security, LLC.
// Produced at the Lawrence Livermore National Laboratory.
// Written by the PSUADE team.
// All rights reserved.
//
// Please see the COPYRIGHT_and_LICENSE file for the copyright notice,
// disclaimer, contact information and the GNU Lesser General Public License.
//
// PSUADE is free software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License (as published by the Free Software
// Foundation) version 2.1 dated February 1999.
//
// PSUADE is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the IMPLIED WARRANTY OF MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the terms and conditions of the GNU General
// Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program; if not, write to the Free Software Foundation,
// Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
// ************************************************************************
// Functions for the class UserRegression
// AUTHOR : CHARLES TONG
// DATE   : 2010
// ************************************************************************
#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include "Psuade.h"
#include "UserRegression.h"
#include "sysdef.h"
#include "PsuadeUtil.h"

#define PABS(x) (((x) > 0.0) ? (x) : -(x))

extern "C" {
   void dgels_(char *, int *, int *, int *, double *A, int *LDA,
               double *B, int *LDB, double *WORK, int *LWORK, int *INFO);
   void dgesvd_(char *, char *, int *, int *, double *, int *, double *,
               double *, int *, double *, int *, double *, int *, int *);
}

// ************************************************************************
// Constructor 
// ------------------------------------------------------------------------
UserRegression::UserRegression(int nInputs,int nSamples):
                               FuncApprox(nInputs,nSamples)
{
   int  ii;
   FILE *fp;

   faID_ = PSUADE_RS_REGRU;
   fp = fopen("user_regression_info", "r");
   if (fp == NULL)
   {
      printf("UserRegression ERROR : user_regression_info not found.\n");
      printf("This file is used to specify information needed for \n");
      printf("general nonlinear regression. The file has the format:\n");
      printf(" line 1 : number of terms in the regression\n");
      printf(" line 2 : the name of the python file to evaluate the basis\n");
      printf("          functions given all input values.\n");
      printf("An example: \n");
      printf("     2 \n");
      printf("     user_regression.py\n\n");
      printf("So create this file and re-run this analysis.\n");
      exit(1);
   }
   fscanf(fp, "%d", &numTerms_);
   if (numTerms_ <= 0)
   {
      printf("UserRegression ERROR: numTerms should be > 0.\n");
      exit(1);
   }
   printf("UserRegression number of basis function = %d\n",numTerms_);
   fscanf(fp, "%s", regFile_);
   fclose(fp);
   printf("UserRegression basis function evaluation file = %s\n",regFile_);
   fp = fopen(regFile_, "r");
   if (fp == NULL)
   {
      printf("UserRegression ERROR : basis function file not found.\n");
      printf("This file is used to evaluate the basis functions given\n");
      printf("all inputs. This file (say user.py) will be called via:\n\n");
      printf("    user.py param_file output_file \n\n");
      printf("where param_file (generated by PSUADE) has the format: \n");
      printf("  line 1: <term number> (which is between 1 and nBasis)\n");
      printf("  line 2 to line nInputs+1: the input values for evaluation.\n");
      printf("and output_file (created by running user.py) has the format: \n");
      printf("  line 1: <output value> \n");
      exit(1);
   }
   regCoeffs_ = new double[numTerms_];
   for (ii = 0; ii < numTerms_; ii++) regCoeffs_[ii] = 0.0;
   regStdevs_ = new double[numTerms_];
   for (ii = 0; ii < numTerms_; ii++) regStdevs_[ii] = 0.0;
   fclose(fp);
}

// ************************************************************************
// destructor
// ------------------------------------------------------------------------
UserRegression::~UserRegression()
{
   if (regCoeffs_ != NULL) delete [] regCoeffs_;
   if (regStdevs_ != NULL) delete [] regStdevs_;
}

// ************************************************************************
// Generate lattice data based on the input set
// ------------------------------------------------------------------------
int UserRegression::genNDGridData(double *X, double *Y, int *N2,
                                 double **X2, double **Y2)
{
   int totPts, ss, status;

   if (nInputs_ <= 0 || nSamples_ <= 0)
   {
      printf("UserRegression::genNDGridData ERROR - invalid argument.\n");
      exit(1);
   } 
   if (nSamples_ <= nInputs_)
   {
      printf("UserRegression::genNDGridData INFO - not enough points.\n");
      printf("                nSamples should be larger than nInputs.\n");
      return 0;
   }
   
   status = analyze(X, Y);
   if (status != 0)
   {
      printf("UserRegression::genNDGridData - ERROR detected.\n");
      (*N2) = 0;
      return -1;
   }

   if ((*N2) == -999) return 0;

   genNDGrid(N2, X2);
   if ((*N2) == 0) return 0;
   totPts = (*N2);

   (*Y2) = new double[totPts];
   for (ss = 0; ss < totPts; ss++)
      (*Y2)[ss] = evaluatePoint(&((*X2)[ss*nInputs_]));

   return 0;
}

// ************************************************************************
// Generate 1D mesh results (set all other inputs to nominal values)
// ------------------------------------------------------------------------
int UserRegression::gen1DGridData(double *X, double *Y, int ind1,
                                  double *settings, int *NN, 
                                  double **XX, double **YY)
{
   int    totPts, mm, nn;
   double HX, *Xloc;

   (*NN) = -999;
   genNDGridData(X, Y, NN, NULL, NULL);

   totPts = nPtsPerDim_;
   HX = (upperBounds_[ind1] - lowerBounds_[ind1]) / (nPtsPerDim_ - 1); 

   (*NN) = totPts;
   (*XX) = new double[totPts];
   (*YY) = new double[totPts];
   Xloc  = new double[nInputs_];
   for (nn = 0; nn < nInputs_; nn++) Xloc[nn] = settings[nn]; 
    
   for (mm = 0; mm < nPtsPerDim_; mm++) 
   {
      Xloc[ind1] = HX * mm + lowerBounds_[ind1];
      (*XX)[mm] = Xloc[ind1];
      (*YY)[mm] = evaluatePoint(Xloc);
   }

   delete [] Xloc;
   return 0;
}

// ************************************************************************
// Generate 2D mesh results (set all other inputs to nominal values)
// ------------------------------------------------------------------------
int UserRegression::gen2DGridData(double *X, double *Y, int ind1,
                        int ind2, double *settings, int *NN, 
                        double **XX, double **YY)
{
   int    totPts, mm, nn, index;
   double *HX, *Xloc;

   (*NN) = -999;
   genNDGridData(X, Y, NN, NULL, NULL);

   totPts = nPtsPerDim_ * nPtsPerDim_;
   HX    = new double[2];
   HX[0] = (upperBounds_[ind1] - lowerBounds_[ind1]) / (nPtsPerDim_ - 1); 
   HX[1] = (upperBounds_[ind2] - lowerBounds_[ind2]) / (nPtsPerDim_ - 1); 

   (*NN) = totPts;
   (*XX) = new double[totPts * 2];
   (*YY) = new double[totPts];
   Xloc  = new double[nInputs_];
   for (nn = 0; nn < nInputs_; nn++) Xloc[nn] = settings[nn]; 
    
   for (mm = 0; mm < nPtsPerDim_; mm++) 
   {
      for (nn = 0; nn < nPtsPerDim_; nn++)
      {
         index = mm * nPtsPerDim_ + nn;
         Xloc[ind1] = HX[0] * mm + lowerBounds_[ind1];
         Xloc[ind2] = HX[1] * nn + lowerBounds_[ind2];
         (*XX)[index*2]   = Xloc[ind1];
         (*XX)[index*2+1] = Xloc[ind2];
         (*YY)[index] = evaluatePoint(Xloc);
      }
   }

   delete [] Xloc;
   delete [] HX;
   return 0;
}

// ************************************************************************
// Generate 3D mesh results (setting others to some nominal values) 
// ------------------------------------------------------------------------
int UserRegression::gen3DGridData(double *X, double *Y, int ind1,
                                  int ind2, int ind3, double *settings, 
                                  int *NN, double **XX, double **YY)
{
   int    totPts, mm, nn, pp, index;
   double *HX, *Xloc;

   (*NN) = -999;
   genNDGridData(X, Y, NN, NULL, NULL);

   totPts = nPtsPerDim_ * nPtsPerDim_ * nPtsPerDim_;
   HX    = new double[3];
   HX[0] = (upperBounds_[ind1] - lowerBounds_[ind1]) / (nPtsPerDim_ - 1); 
   HX[1] = (upperBounds_[ind2] - lowerBounds_[ind2]) / (nPtsPerDim_ - 1); 
   HX[2] = (upperBounds_[ind3] - lowerBounds_[ind3]) / (nPtsPerDim_ - 1); 

   (*NN) = totPts;
   (*XX) = new double[totPts * 3];
   (*YY) = new double[totPts];
   Xloc  = new double[nInputs_];
   for (nn = 0; nn < nInputs_; nn++) Xloc[nn] = settings[nn]; 
    
   for (mm = 0; mm < nPtsPerDim_; mm++) 
   {
      for (nn = 0; nn < nPtsPerDim_; nn++)
      {
         for (pp = 0; pp < nPtsPerDim_; pp++)
         {
            index = mm * nPtsPerDim_ * nPtsPerDim_ + nn * nPtsPerDim_ + pp;
            Xloc[ind1] = HX[0] * mm + lowerBounds_[ind1];
            Xloc[ind2] = HX[1] * nn + lowerBounds_[ind2];
            Xloc[ind3] = HX[2] * pp + lowerBounds_[ind3];
            (*XX)[index*3]   = Xloc[ind1];
            (*XX)[index*3+1] = Xloc[ind2];
            (*XX)[index*3+2] = Xloc[ind3];
            (*YY)[index] = evaluatePoint(Xloc);
         }
      }
   }

   delete [] Xloc;
   delete [] HX;
   return 0;
}

// ************************************************************************
// Generate 4D mesh results (setting others to some nominal values) 
// ------------------------------------------------------------------------
int UserRegression::gen4DGridData(double *X, double *Y, int ind1, int ind2,
                                  int ind3, int ind4, double *settings, 
                                  int *NN, double **XX, double **YY)
{
   int    totPts, mm, nn, pp, qq, index;
   double *HX, *Xloc;

   (*NN) = -999;
   genNDGridData(X, Y, NN, NULL, NULL);

   totPts = nPtsPerDim_ * nPtsPerDim_ * nPtsPerDim_ * nPtsPerDim_;
   HX    = new double[4];
   HX[0] = (upperBounds_[ind1] - lowerBounds_[ind1]) / (nPtsPerDim_ - 1); 
   HX[1] = (upperBounds_[ind2] - lowerBounds_[ind2]) / (nPtsPerDim_ - 1); 
   HX[2] = (upperBounds_[ind3] - lowerBounds_[ind3]) / (nPtsPerDim_ - 1); 
   HX[3] = (upperBounds_[ind4] - lowerBounds_[ind4]) / (nPtsPerDim_ - 1); 

   (*NN) = totPts;
   (*XX) = new double[totPts * 4];
   (*YY) = new double[totPts];
   Xloc  = new double[nInputs_];
   for (nn = 0; nn < nInputs_; nn++) Xloc[nn] = settings[nn]; 
    
   for (mm = 0; mm < nPtsPerDim_; mm++) 
   {
      for (nn = 0; nn < nPtsPerDim_; nn++)
      {
         for (pp = 0; pp < nPtsPerDim_; pp++)
         {
            for (qq = 0; qq < nPtsPerDim_; qq++)
            {
               index = mm*nPtsPerDim_*nPtsPerDim_*nPtsPerDim_ +
                       nn*nPtsPerDim_*nPtsPerDim_ + pp * nPtsPerDim_ + qq;
               Xloc[ind1] = HX[0] * mm + lowerBounds_[ind1];
               Xloc[ind2] = HX[1] * nn + lowerBounds_[ind2];
               Xloc[ind3] = HX[2] * pp + lowerBounds_[ind3];
               Xloc[ind4] = HX[3] * qq + lowerBounds_[ind4];
               (*XX)[index*4]   = Xloc[ind1];
               (*XX)[index*4+1] = Xloc[ind2];
               (*XX)[index*4+2] = Xloc[ind3];
               (*XX)[index*4+3] = Xloc[ind4];
               (*YY)[index] = evaluatePoint(Xloc);
            }
         }
      }
   }

   delete [] Xloc;
   delete [] HX;
   return 0;
}

// ************************************************************************
// Evaluate a given point
// ------------------------------------------------------------------------
double UserRegression::evaluatePoint(double *X)
{
   int    ii, kk;
   double Y, ddata;
   char   sysCmd[500];
   FILE   *fp;

   if (regCoeffs_ == NULL) return 0.0;
   Y = 0.0;
   sprintf(sysCmd, "%s input output", regFile_);
   for (ii = 0; ii < numTerms_; ii++)
   {
      fp = fopen("input", "w");
      if(fp == NULL)
      {
         printf("fopen returned NULL in file %s line %d, exiting\n",
                 __FILE__, __LINE__);
         exit(1);
      }
      fprintf(fp, "%d\n", ii+1);
      for (kk = 0; kk < nInputs_; kk++) fprintf(fp, "%e\n", X[kk]);
      fclose(fp);
      system(sysCmd);
      fp = fopen("output", "r");
      if(fp == NULL)
      {
         printf("fopen returned NULL in file %s line %d, exiting\n",
                __FILE__, __LINE__);
         exit(1);
      }
      fscanf(fp, "%lg", &ddata);
      fclose(fp);
      Y += regCoeffs_[ii] * ddata;
   }
   unlink("input");
   unlink("output");
   return Y;
}

// ************************************************************************
// Evaluate a number of points
// ------------------------------------------------------------------------
double UserRegression::evaluatePoint(int npts, double *X, double *Y)
{
   for (int kk = 0; kk < npts; kk++)
      Y[kk] = evaluatePoint(&X[kk*nInputs_]);
   return 0.0;
}

// ************************************************************************
// Evaluate a given point and also its standard deviation
// ------------------------------------------------------------------------
double UserRegression::evaluatePointFuzzy(double *X, double &std)
{
   printf("UserRegression INFO: not implemented yet.\n");
   std = 0.0;
   return 0.0;
}

// ************************************************************************
// Evaluate a number of points and also their standard deviations
// ------------------------------------------------------------------------
double UserRegression::evaluatePointFuzzy(int npts, double *X, double *Y,
                                          double *Ystd)
{
   for (int kk = 0; kk < npts; kk++)
      Y[kk] = evaluatePointFuzzy(&X[kk*nInputs_], Ystd[kk]);
   return 0.0;
}

// ************************************************************************
// perform mean/variance analysis
// ------------------------------------------------------------------------
int UserRegression::analyze(double *X, double *Y)
{
   int    N, M, mm, nn, wlen, info, NRevised;
   double *B, *XX, SSresid, SStotal, R2, *XTX, var, *Bvar;
   double esum, ymax, *WW, *SS, *AA, *UU, *VV;
   char   jobu  = 'A', jobvt = 'A';
   char   pString[100];
   FILE   *fp;

   if (nInputs_ <= 0 || nSamples_ <= 0)
   {
      printf("UserRegression::analyze ERROR - invalid arguments.\n");
      exit(1);
   } 
   if (nSamples_ <= nInputs_)
   {
      printf("UserRegression::analyze ERROR - sample size too small.\n");
      return -1;
   } 
   
   if (outputLevel_ >= 1)
   {
      printAsterisks(0);
      printf("*                User Regression Analysis\n");
      printf("* R-square gives a measure of the goodness of the model.\n");
      printf("* R-square should be close to 1 if it is a good model.\n");
      printf("* Turn on rs_expert mode to output regression matrix.\n");
      printf("* Set print level to 5 to output regression error plot.\n");
      printEquals(0);
   }
   N = loadXMatrix(X, &XX);
   M = nSamples_;

   wlen = 5 * M;
   AA = new double[M*N];
   UU = new double[M*M];
   SS = new double[N];
   VV = new double[M*N];
   WW = new double[wlen];
   B  = new double[N];
   for (mm = 0; mm < M; mm++)
      for (nn = 0; nn < N; nn++)
         AA[mm+nn*M] = sqrt(weights_[mm]) * XX[mm+nn*M];

   if (psRSExpertMode_ == 1)
   {
      fp = fopen("User_regression_matrix.m", "w");
      if(fp == NULL)
      {
         printf("fopen returned NULL in file %s line %d, exiting\n",
                __FILE__, __LINE__);
         exit(1);
      }
      fprintf(fp, "%% the sample matrix where svd is computed\n");
      fprintf(fp, "%% the last column is the right hand side\n");
      fprintf(fp, "AA = [\n");
      for (mm = 0; mm < M; mm++)
      {
         for (nn = 0; nn < N; nn++)
            fprintf(fp, "%16.6e ", AA[mm+nn*M]);
         fprintf(fp, "%16.6e \n",Y[mm]);
      }
      fprintf(fp, "];\n");
      fprintf(fp, "A = AA(:,1:%d);\n", N);
      fprintf(fp, "B = AA(:,%d);\n", N+1);
      fclose(fp);
      printf("Regression matrix written to User_regression_matrix.m\n");
   }

   if (outputLevel_ > 3) printf("Running SVD ...\n");
   dgesvd_(&jobu, &jobvt, &M, &N, AA, &M, SS, UU, &M, VV, &N, WW,
           &wlen, &info);
   if (outputLevel_ > 3) printf("SVD completed: status = %d (should be 0).\n",info);

   if (info != 0)
   {
      printf("* UserRegression Info: dgesvd returns a nonzero (%d).\n",info);
      printf("* UserRegression terminates further processing.\n");
      delete [] XX;
      delete [] AA;
      delete [] UU;
      delete [] SS;
      delete [] VV;
      delete [] WW;
      delete [] B;
      return -1;
   }

   if (SS[0] == 0.0) NRevised = 0;
   else
   {
      NRevised = N;
      for (nn = 1; nn < N; nn++)
         if (SS[nn-1] > 0 && SS[nn]/SS[nn-1] < 1.0e-8) NRevised--;
   }
   if (NRevised < N)
   {
      printf("* UserRegression ERROR: true rank of sample = %d (need %d)\n",
             NRevised, N);
      delete [] XX;
      delete [] AA;
      delete [] UU;
      delete [] SS;
      delete [] VV;
      delete [] WW;
      delete [] B;
      return -1;
   }
   if (psRSExpertMode_ == 1)
   {
      printf("UserRegression: singular values for the Vandermonde matrix\n");
      printf("The VERY small ones may cause poor numerical accuracy,\n");
      printf("but not keeping them may ruin the approximation power.\n");
      printf("So, select them judiciously.\n");
      for (nn = 0; nn < N; nn++)
         printf("Singular value %5d = %e\n", nn+1, SS[nn]);
      sprintf(pString, "How many to keep (1 - %d) ? ", N);
      NRevised = getInt(1,N,pString);
      for (nn = NRevised; nn < N; nn++) SS[nn] = 0.0;
   }
   else
   {
      NRevised = N;
      for (nn = 1; nn < N; nn++)
      {
         if (SS[nn-1] > 0.0 && SS[nn]/SS[nn-1] < 1.0e-8) SS[nn] = 0.0;
         else NRevised++;
      }
   }
   for (mm = 0; mm < NRevised; mm++)
   {
      WW[mm] = 0.0;
      for (nn = 0; nn < M; nn++)
         WW[mm] += UU[mm*M+nn] * sqrt(weights_[nn]) * Y[nn];
   }
   for (nn = 0; nn < NRevised; nn++) WW[nn] /= SS[nn];
   for (nn = NRevised; nn < N; nn++) WW[nn] = 0.0;
   for (mm = 0; mm < N; mm++)
   {
      B[mm] = 0.0;
      for (nn = 0; nn < NRevised; nn++) B[mm] += VV[mm*N+nn] * WW[nn];
   }
   delete [] AA;
   delete [] SS;
   delete [] UU;
   delete [] VV;

   if (outputLevel_ >= 5)
   {
      fp = fopen("user_regression_error.m", "w");
      if(fp == NULL)
      {
	 printf("fopen returned NULL in file %s line %d, exiting\n",
                __FILE__, __LINE__);
         exit(1);
      }
      fprintf(fp, "%% This file contains errors of each data point.\n");
   }
   else fp = NULL;

   esum = ymax = 0.0;
   for (mm = 0; mm < nSamples_; mm++)
   {
      WW[mm] = 0.0;
      for (nn = 0; nn < N; nn++)
         WW[mm] = WW[mm] + XX[mm+nn*nSamples_] * B[nn];
      WW[mm] = WW[mm] - Y[mm];
      esum = esum + WW[mm] * WW[mm] * weights_[mm];
      if (fp != NULL) fprintf(fp, "%6d %24.16e\n",mm+1,WW[mm]*sqrt(weights_[mm]));
      if (PABS(Y[mm]) > ymax) ymax = PABS(Y[mm]);
   }
   esum /= (double) nSamples_;
   esum = sqrt(esum);
   printf("* UserRegression:: LS mean error = %11.4e (max=%11.4e)\n",
          esum, ymax); 

   if (fp != NULL)
   {
      fclose(fp);
      printf("FILE user_regression_error contains data errors.\n");
   }

   computeSS(N, XX, Y, B, SSresid, SStotal);
   R2  = 1.0 - SSresid / SStotal;
   if (nSamples_ > N) var = SSresid / (double) (nSamples_ - N);
   else               var = 0.0;

   Bvar = new double[N];
   computeXTX(N, XX, &XTX);
   computeCoeffVariance(N, XTX, var, Bvar);

   if (outputLevel_ >= 0)
   {
      printRC(N, B, Bvar, XX, Y);
      printf("* UserRegression model R-square = %12.4e\n", R2);
      printf("* adjusted   R-square = %12.4e\n",
             1.0 - (1.0 - R2) * ((M - 1) / (M - N - 1)));
   }
 
   if (regCoeffs_ != NULL) delete [] regCoeffs_;
   regCoeffs_ = B;
   delete [] XX;
   delete [] XTX;
   delete [] Bvar;
   delete [] WW;
   return 0;
}

// *************************************************************************
// load the X matrix
// -------------------------------------------------------------------------
int UserRegression::loadXMatrix(double *X, double **XXOut)
{
   int    M, N=0, m, n, k;
   double *XX=NULL;
   char   sysCmd[500];
   FILE   *fp;

   M = nSamples_;
   N = numTerms_;
   XX = new double[M*N];
   sprintf(sysCmd, "%s input output", regFile_);
   for (m = 0; m < M; m++)
   {
      for (n = 0; n < N; n++)
      {
         fp = fopen("input", "w");
	 if(fp == NULL)
         {
            printf("fopen returned NULL in file %s line %d, exiting\n",
                   __FILE__, __LINE__);
            exit(1);
         }
         fprintf(fp, "%d\n", n+1);
         for (k = 0; k < nInputs_; k++)
            fprintf(fp, "%e\n", X[m*nInputs_+k]);
         fclose(fp);
         system(sysCmd);
         fp = fopen("output", "r");
	 if(fp == NULL)
         {
            printf("fopen returned NULL in file %s line %d, exiting\n", 
                   __FILE__, __LINE__);
            exit(1);
	 }
         fscanf(fp, "%lg", &XX[M*n+m]);
         fclose(fp);
      }
   }
   strcpy(sysCmd, "rm -rf input output");
   system(sysCmd);
   (*XXOut) = XX;
   return N;
}

// *************************************************************************
// form X^T X 
// -------------------------------------------------------------------------
int UserRegression::computeXTX(int N, double *X, double **XXOut)
{
   int    nn, nn2, mm;
   double *XX, coef;

   XX = new double[nSamples_*N];
   for (nn = 0; nn < N; nn++)
   {
      for (nn2 = 0; nn2 < N; nn2++)
      {
         coef = 0.0;
         for (mm = 0; mm < nSamples_; mm++)
            coef += X[nn*nSamples_+mm] * weights_[mm] * X[nn2*nSamples_+mm];
         XX[nn*N+nn2] = coef;
      }
   }
   (*XXOut) = XX;
   return 0;
}

// *************************************************************************
// compute SS (sum of squares) statistics
// -------------------------------------------------------------------------
int UserRegression::computeSS(int N, double *XX, double *Y,
                              double *B, double &SSresid, double &SStotal)
{
   int    nn, mm;
   double rdata, ymean, SSreg, ddata;
                                                                                
   SSresid = SStotal = SSreg = ymean = 0.0;
   for (mm = 0; mm < nSamples_; mm++)
      ymean += (sqrt(weights_[mm]) * Y[mm]);
   ymean /= (double) nSamples_;
   for (mm = 0; mm < nSamples_; mm++)
   {
      ddata = 0.0;
      for (nn = 0; nn < N; nn++) ddata += (XX[mm+nn*nSamples_] * B[nn]);
      rdata = Y[mm] - ddata;
      SSresid += rdata * rdata * weights_[mm];
      SSreg += (ddata - ymean) * (ddata - ymean);
   }
   for (mm = 0; mm < nSamples_; mm++)
      SStotal += weights_[mm] * (Y[mm] - ymean) * (Y[mm] - ymean);
   printf("UserRegression: SStot, SSreg, SSres = %e %e %e\n",
          SStotal, SSreg, SSresid);
   return 0;
}

// *************************************************************************
// compute coefficient variance ((diagonal of sigma^2 (X' X)^(-1))
// -------------------------------------------------------------------------
int UserRegression::computeCoeffVariance(int N,double *XX,double var,
                                         double *B)
{
   int    i, j, lwork, iOne=1, info;
   double *B2, *work, *XT;
   char   trans[1];

   (*trans) = 'N';
   B2 = new double[N];
   XT = new double[N*N];
   lwork = 2 * N * N;
   work  = new double[lwork];
   for (i = 0; i < N; i++)
   {
      for (j = 0; j < N*N; j++) XT[j] = XX[j];
      for (j = 0; j < N; j++) B2[j] = 0.0;
      B2[i] = var;
      dgels_(trans, &N, &N, &iOne, XT, &N, B2, &N, work, &lwork, &info);
      if (info != 0)
         printf("UserRegression WARNING: dgels returns error %d.\n",info);
      if (B2[i] < 0) B[i] = 0;
      else           B[i] = sqrt(B2[i]);
   }
   delete [] B2;
   delete [] work;
   delete [] XT;
   return info;
}

// *************************************************************************
// print statistics
// -------------------------------------------------------------------------
int UserRegression::printRC(int N,double *B,double *Bvar,double *XX,
                            double *Y)
{
   int    ii;
   double coef;

   printDashes(0);
   printf("*  Term    coefficient   std. error   t-value\n");
   for (ii = 0; ii < numTerms_; ii++)
   {
      if (PABS(Bvar[ii]) < 1.0e-15) coef = 0.0;
      else                          coef = B[ii] / Bvar[ii]; 
      printf("    %3d   %12.4e   %12.4e   %12.4e\n",ii+1,B[ii],Bvar[ii],coef);
   }
   printDashes(0);
   return 0;
}

